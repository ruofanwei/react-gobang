{"version":3,"sources":["components/Square.js","components/Board.js","components/Rule.js","components/App.js","reportWebVitals.js","index.js"],"names":["Button","styled","div","Black","White","Square","value","onClick","BoardRow","Row","Board","squares","map","row","yIndex","col","xIndex","findTheWinner","x","y","winner","blackOrWhite","countTotal","directionX","directionY","chessInRow","nextX","nextY","console","log","Blink","keyframes","Game","H1","H3","Win","Span","span","button","Text","Title","window","location","reload","App","useState","Array","fill","board","setBoard","stepPlayed","setStepPlayed","blackIsNext","setBlackIsNext","currentX","setCurrentX","currentY","setCurrentY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4529971.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport React from \"react\";\n\nconst Button = styled.div`\n  display: table;\n  float: left;\n  margin: 0;\n  width: 25px;\n  height: 25px;\n  background: linear-gradient(\n      to bottom,\n      transparent 48%,\n      #999 48%,\n      #999 52%,\n      transparent 52%\n    ),\n    linear-gradient(\n      to right,\n      transparent 48%,\n      #999 48%,\n      #999 52%,\n      transparent 52%\n    );\n  cursor: pointer;\n  &:hover {\n    background: radial-gradient(\n      circle closest-side at center,\n      #ffc93c,\n      rgba(0, 0, 0, 0)\n    );\n    \n  }\n  &:active {\n    transform: scale(0.98, 0.98);\n  }\n`;\nconst Black = styled.div`\n  content: \"\";\n  background-color: #4d6b61;\n  width: 20px;\n  height: 20px;\n  border: 0;\n  margin: 2px auto 0;\n  border-radius: 50%;\n  justify-content: center;\n  box-shadow: \n    inset 0 -2px 2px rgba(0, 0, 0, 0.2),\n    inset 2px 0 2px rgba(0, 0, 0, 0.2),\n    inset -2px 0 2px rgba(0, 0, 0, 0.2),\n    inset 0 -2px 2px rgba(0, 0, 0, 0.2),\n    0 2px 2px 0px #272a27;\n \n`;\n\nconst White = styled.div`\n  content: \"\";\n  background-color: #fcfcfc;\n  width: 20px;\n  height: 20px;\n  border: 0;\n  margin: 2px auto 0;\n  border-radius: 50%;\n  box-shadow: \n    inset 0 -2px 2px 0 rgba(0, 0, 0, 0.2), \n    inset 2px 0 2px 0 rgba(0, 0, 0, 0.2),\n    inset -2px 0 2px 0 rgba(0, 0, 0, 0.2), \n    inset 0 -2px 2px 0 rgba(0, 0, 0, 0.2), \n    0 2px 2px 0px #272a27;\n`;\nfunction Square({ value, onClick }) {\n  return (\n    <Button onClick={onClick}>\n      {value ? value === \"black\" ? <Black /> : <White /> : null}\n    </Button>\n  );\n}\n\nexport default Square;\n","import Square from \"./Square\"\nimport styled from \"styled-components\";\nimport React from \"react\";\n\nconst BoardRow = styled.div`\n  margin: 20px auto;\n  height: 475px;\n  width: 475px;\n  background-color: #eee;\n  box-shadow: \n    inset 0 -3px 3px 0 rgba(0, 0, 0, 0.2), \n    inset 3px 0 3px 0 rgba(0, 0, 0, 0.2),\n    inset -3px 0 3px 0 rgba(0, 0, 0, 0.2), \n    inset 0 -3px 3px 0 rgba(0, 0, 0, 0.2), \n    0 3px 3px 0px #272a27;\n  border-radius: 5px;\n`;\n\nconst Row = styled.div`\n  clear: both;\n`;\n\nfunction Board({ squares, onClick }) {\n  return (\n    <BoardRow>\n      {squares.map((row, yIndex) => (\n        <Row key={yIndex}>\n          {row.map((col, xIndex) => (\n            <Square\n              key={xIndex}\n              value={col}\n              onClick={() => onClick(xIndex, yIndex)}\n            />\n          ))}\n        </Row>\n      ))}\n    </BoardRow>\n  );\n};\n\n\nexport default Board;","const findTheWinner = (squares, x, y) => {\n  if (x === null || y === null) return;\n  const blackOrWhite = squares[y][x]; // find out this black or white\n  let winner;\n  // calculate how many same color chesses in a row\n  const countTotal = (blackOrWhite, x, y, directionX, directionY) => {\n    let chessInRow = 0;\n    let nextX = x;\n    let nextY = y;\n\n    while (chessInRow < 5) {\n      nextX += directionX;\n      nextY += directionY;\n      if (\n        nextX < 0 ||\n        nextX >= 19 ||\n        nextY < 0 ||\n        nextY >= 19 ||\n        squares[nextY][nextX] !== blackOrWhite\n      )\n        break;\n      chessInRow++;\n    }\n    return chessInRow;\n  };\n  // if there are 4 chesses in a row, we have the winner\n\n  if (\n    countTotal(blackOrWhite, x, y, 1, 0) +\n      countTotal(blackOrWhite, x, y, -1, 0) >=\n      4 ||\n    countTotal(blackOrWhite, x, y, 0, 1) +\n      countTotal(blackOrWhite, x, y, 0, -1) >=\n      4 ||\n    countTotal(blackOrWhite, x, y, 1, 1) +\n      countTotal(blackOrWhite, x, y, -1, -1) >=\n      4 ||\n    countTotal(blackOrWhite, x, y, -1, 1) +\n      countTotal(blackOrWhite, x, y, 1, -1) >=\n      4\n  ) {\n    winner = blackOrWhite;\n    console.log(winner);\n  }\n  console.log(winner);\n  return winner;\n};\n\nexport default findTheWinner;\n","import React from \"react\";\nimport { useState } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport Board from \"./Board\";\nimport findTheWinner from \"./Rule\";\n\n// Âª∫Á´ã keyframes\nconst Blink = keyframes`\n  78% {\n    color: inherit;\n    text-shadow: inherit;\n  }\n  79%{\n     color: #333;\n  }\n  80% {\n    \n    text-shadow: none;\n  }\n  81% {\n    color: inherit;\n    text-shadow: inherit;\n  }\n  82% {\n    color: #333;\n    text-shadow: none;\n  }\n  83% {\n    color: inherit;\n    text-shadow: inherit;\n  }\n  92% {\n    color: #333;\n    text-shadow: none;\n  }\n  92.5% {\n    color: inherit;\n    text-shadow: inherit;\n  }\n`;\n\nconst Game = styled.div`\n  min-height: 100vh;\n  justify-content: center;\n  background-color: #204051;\n`;\nconst H1 = styled.div`\n  text-align: center;\n  font-size: 40px;\n  font-weight: bold;\n  color: #fee;\n  text-shadow: \n    0 -49px 10px, \n    0 0 2px, \n    0 0 1em #fcbf1e, \n    0 0 0.5em #fcbf1e,\n    0 0 0.1em #fcbf1e, \n    0 4px 3px #000;\n\n`;\nconst H3 = styled.div`\n  text-align: center;\n  font-size: 24px;\n  color: #ffffff;\n  text-shadow: \n    2px 2px 2px rgba(0, 0, 0, 0.3),\n    -2px -2px 2px rgba(255, 255, 255, 0.4);\n`;\nconst Win = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0,0,0,0.55);\n  font-size: 60px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n  letter-spacing: 4px;\n  color: #fee;\n  text-shadow: \n    0 -40px 100px, \n    0 0 2px, \n    0 0 1em #ff4444, \n    0 0 0.5em #ff4444, \n    0 0 0.1em #ff4444, \n    0 10px 3px #000;\n\n  \n`;\nconst Span = styled.span`\n  animation: ${Blink} linear infinite 2s;\n  &:nth-of-type(2) {\n    animation: ${Blink} linear infinite 3s;\n  }\n  &:nth-of-type(3) {\n    transition: 2s;\n    animation: ${Blink} linear infinite 1s;\n  }\n`;\nconst Button = styled.button`\n margin-top: 10px;\n font-size: 20px;\n padding: 5px 18px; \n cursor: pointer;\n`;\nconst Text = styled.div``\nconst Title = ({ blackOrWhite, winner }) => {\n  return (\n    <div>\n      <H1>‰∫îÂ≠êÊ£ã</H1>\n      {winner && (\n        <Win>\n         <Text> üéâ <Span>Con</Span>gratu<Span>lati</Span>ons ! <Span>Winn</Span>er is {winner} üéâ</Text>\n         <Button\n            onClick={() => {\n              window.location.reload();\n            }}\n          >\n            ÂÜçÁé©‰∏ÄÊ¨°\n          </Button>\n          \n        </Win>\n      )}\n      <H3>Next is ü§û {blackOrWhite}</H3>\n    </div>\n  );\n};\n\nfunction App() {\nconst [board, setBoard] = useState(Array(19).fill(Array(19).fill(null)));\nconst [stepPlayed, setStepPlayed] = useState(0);\nconst [blackIsNext, setBlackIsNext] = useState(true);\nconst [currentX, setCurrentX] = useState(null);\nconst [currentY, setCurrentY] = useState(null);\nconst blackOrWhite = blackIsNext ? \"black\" : \"white\";\nconst winner = findTheWinner(board, currentX, currentY);\nconst handleMove = (xIndex, yIndex) => {\n  setCurrentX(xIndex);\n  setCurrentY(yIndex);\n  const squares = [...board];\n  if (winner || squares[yIndex][xIndex]) return;\n  setBoard(\n    squares.map((row, currentY) => {\n      // Â¶ÇÊûúÈÄô‰∏ÄÂÄãÊ©´Êéí‰∏çÊòØÊàëË¶ÅÊîπÁöÑÔºåÁõ¥Êé•ÂõûÂÇ≥Âç≥ÂèØ\n      if (currentY !== yIndex) return row;\n      // Â¶ÇÊûúÊòØÁöÑË©±ÔºåÊâæÂà∞ÊàëË¶ÅÊîπÁöÑÈÇ£ÂÄã x ÁöÑ‰ΩçÁΩÆ\n      return row.map((col, currentX) => {\n        if (currentX !== xIndex) return col;\n        return blackOrWhite;\n      });\n    })\n  );\n  setStepPlayed(stepPlayed + 1);\n  setBlackIsNext(!blackIsNext);\n};\n\n  return (\n    <Game>\n      <Title blackOrWhite={blackOrWhite} winner={winner} />\n      <Board squares={board} onClick={handleMove} />\n    </Game>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}